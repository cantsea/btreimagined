@page "/faq"
@using MudBlazor
@using System.Net.Http.Json
@using System.Text.Json

@inject HttpClient Http

<PageTitle>FAQ</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
    <MudText Typo="Typo.h4" GutterBottom="true" Align="Align.Center">
        Frequently Asked Questions
    </MudText>

    @if (loading)
    {
        <MudSkeleton Width="100%" Height="60px" Class="mb-3" />
        <MudSkeleton Width="100%" Height="60px" Class="mb-3" />
        <MudSkeleton Width="100%" Height="60px" Class="mb-3" />
    }
    else if (!string.IsNullOrWhiteSpace(error))
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mb-3">
            @error
        </MudAlert>
        <MudButton OnClick="LoadData" Variant="Variant.Filled">Reload</MudButton>
    }
    else if (Data is null || Data.Sections is null || Data.Sections.Count == 0)
    {
        <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">
            No FAQ data found.
        </MudAlert>
    }
    else
    {
        <MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-4" Spacing="2">
            <MudButton OnClick="LoadData" Variant="Variant.Outlined">Reload</MudButton>
            @if (LastLoaded is not null)
            {
                <MudText Typo="Typo.caption">Last loaded: @LastLoaded?.ToLocalTime().ToString("g")</MudText>
            }
        </MudStack>

        @foreach (var sectionTitle in Data.Sections)
        {
            // Safely get bullets for section (may be missing)
            var bullets = (Data.BulletsBySection is not null &&
            Data.BulletsBySection.TryGetValue(sectionTitle, out var list) &&
            list is not null)
            ? list
            : new List<string>();

            <MudCard Outlined="true" Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.h5" GutterBottom="true">@sectionTitle</MudText>
                    @if (bullets.Count == 0)
                    {
                        <MudText Typo="Typo.body2" Class="opacity-70">
                            (No items yet for this section.)
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1">
                            <ul>
                                @foreach (var bullet in bullets)
                                {
                                    <li>@bullet</li>
                                }
                            </ul>
                        </MudText>
                    }
                </MudCardContent>
            </MudCard>
        }
    }
</MudContainer>

@code {
    // Replace this with your RAW GitHub URL (example shown below).
    // e.g., https://raw.githubusercontent.com/<user>/<repo>/<branch>/path/to/faq.json
    private const string JsonUrl = "https://raw.githubusercontent.com/cantsea/publicjson/main/servermc_faq.json";

    private bool loading = true;
    private string? error;
    private DateTimeOffset? LastLoaded;

    private FaqData? Data;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        error = null;

        try
        {
            // You can also use GetFromJsonAsync<FaqData>(JsonUrl, options) if you prefer:
            var json = await Http.GetStringAsync(JsonUrl);
            var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };

            var parsed = JsonSerializer.Deserialize<FaqData>(json, options);

            // Normalize to avoid null refs
            Data = parsed ?? new FaqData();
            Data.Sections ??= new();
            Data.BulletsBySection ??= new();

            LastLoaded = DateTimeOffset.UtcNow;
        }
        catch (Exception ex)
        {
            error = $"Failed to load FAQ data from GitHub: {ex.Message}";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    // DTOs matching the JSON structure
    public class FaqData
    {
        public List<string>? Sections { get; set; }
        public Dictionary<string, List<string>>? BulletsBySection { get; set; }
    }
}
